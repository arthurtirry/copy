package ogp.game;

import ogp.util.Rectangle;
import ogp.util.Vector;
import ogp.util.TimeAccumulator;
import ogp.util.SpecUtil;

import java.util.ArrayList;
import java.util.Arrays;

import ogp.util.Point;


/**
 * A class that keeps track of everything going on in the game
 *instream nog toevoegen voor elk element.
 * 
 * @invar | getMaxTimeDelta() > 0
 * @invar | getGravCst() > 0
 * @invar | getWidth() > 0 && getHeight() > 0 
 * @invar | getField() !=null
 * @invar | getPlayer() !=null
 * @invar | getPlayerRect()!=null
 * @invar | getPlayerTopLeft()!=null
 * @invar | getPlayerBotLeft()!=null
 * @invar | getBlocks()!=null
 * 
 * @invar | getGemsOnField()!=null
 * @invar | getPlayerGems()!=null
 * @invar | getPlayerBag()!=null
 * @invar ship hitbox within field, if there is a ship
 * 	| getShipOnField() == null || getField().contains(getShipOnField().getHbox())
 * 
 */
public class World {
	
	/**
	 * see SpecUtil class for helper methods
	 * 
	 * 
	 * @invar | field.getTL().equals(Point.O())
	 * 
	 * 
	 * @invar | maxTimeDelta > 0
	 * @invar | gravCst > 0
	 * @invar | width > 0 && height > 0
	 * 
	 * 
	 * 
	 */
	private final Rectangle field;
	/**
	 * @representationObject
	 */
	private Player player;
	/**
	 * @representationObject
	 */
	private Block[] blocks;
	/**
	 * @representationObject
	 */
	private Spaceship shipOnField;
	/**
	 * @representationObject
	 */
	private Gem[] gemsOnField;
	private final int maxTimeDelta;
	private final int gravCst;
	private final int width;
	private final int height;
	
	private boolean gravitySwitched = false;
	
	private boolean victory = false;
	private TimeAccumulator timeAccumulator;
	
	public int getWidth() {
		return width;
	}
	
	public int getHeight() {
		return height;
	}
	
	public int getGravCst() {
		return gravCst;
	}
	
	public int getMaxTimeDelta() {
		return maxTimeDelta;
	}
	
	public Rectangle getField() {
		return field;
	}
	
	public Player getPlayer() {
		return player.copy();
	}
	
	public Rectangle getPlayerRect() {
		return player.getHitbox();
	}
	
	public Point getPlayerTopLeft() {
		return player.getHitbox().getTL();
	}
	
	public Point getPlayerBotLeft() {
		return player.getPositionBL();
	}
	
	public Block[] getBlocks() {
		return blocks.clone();
	}
	
	public Spaceship getShipOnField() {
		return shipOnField.copy();
	}
	
	public Gem[] getGemsOnField() {
		return gemsOnField.clone();
	}
	
	public ArrayList<Gem> getPlayerGems() {
		return player.getGems() ;
	}
	
	public Bag getPlayerBag() {
		return player.getBag().copy();
	}
	
	public boolean getGravSwitched() {
		return gravitySwitched;
	}
	
	public boolean getVictory() {
		return victory;
	}
	

    /**
     * Creates a new game world.
     * @throws IllegalArgumentException | gravCst <= 0
     * @throws IllegalArgumentException | maxTimeDelta <= 0
     * @throws IllegalArgumentException | width <= 0
     * @throws IllegalArgumentException | height <= 0
     * @throws IllegalArgumentException | field == null
     * @throws IllegalArgumentException | player == null
     * @throws IllegalArgumentException | blocks == null
     * @throws IllegalArgumentException | gemsOnField == null
     * @throws IllegalArgumentException | shipOnField != null && !field.contains(shipOnField.getHbox())
     * @throws IllegalArgumentException | Arrays.stream(blocks).anyMatch(b -> b == null || !field.contains(b.getHbox()))
     * @throws IllegalArgumentException | Arrays.stream(gemsOnField).anyMatch(g -> g == null || !field.contains(g.getHbox()))
     * */
	public World(int gravCst, int maxTimeDelta, int width, int height, Player player, Block[] blocks, Spaceship shipOnField, Gem[] gemsOnField,Rectangle field) {
		
		if (gravCst <= 0) { throw new IllegalArgumentException(); }
		this.gravCst = gravCst;
		
		if (width<=0) {throw new IllegalArgumentException();}
		this.width = width;
		
		if (shipOnField != null && shipOnField.getHbox().getBR().getX() > this.width) {
			throw new IllegalArgumentException();
		}
		this.shipOnField = shipOnField == null ? null : shipOnField.copy();
		
	
		if (maxTimeDelta <= 0) { throw new IllegalArgumentException("De tijd is kleiner dan nul"); }
		this.maxTimeDelta = maxTimeDelta;
		if (height<=0) {throw new IllegalArgumentException(); }
		this.height = height;
		if (field == null) {throw new IllegalArgumentException();}
		this.field = field;
		
		if (player == null) {throw new IllegalArgumentException();}
		this.player = player;
		if (Arrays.stream(blocks).anyMatch(b -> b == null || !field.contains(b.getHitbox()))) {
		    throw new IllegalArgumentException();
		}
		this.blocks = blocks;
		
		if (Arrays.stream(gemsOnField).anyMatch(g -> g == null || !field.contains(g.getHbox()))) {
		    throw new IllegalArgumentException();
		}
		this.gemsOnField = gemsOnField;
		
		timeAccumulator = new TimeAccumulator(); //legit
		
		}

	/**
	 * LEGIT
	 */
	public void tick(long elapsedNanoseconds)
    {
        timeAccumulator.accumulate(elapsedNanoseconds);
        
        while ( timeAccumulator.grab(1000000) )
        {
            atomicTick(1);
        }
    }
    
    /**
     * @param dt in milliseconds
     * @pre | dt <= getMaxTimeDelta()
     */
    public void atomicTick(int dt) {
	
	
		player.updateSpeedWithGravity(gravCst, dt, gravitySwitched);
		
		//move player according to its speed and taking collisions into account
		Rectangle newHitbox = player.getHitbox().plus(player.getSpeed()); //candidate new hitbox
		var mbColliderRect = Rectangle.selectCollider(newHitbox, rectangles());
		
		if (mbColliderRect.isEmpty()) { //no collisions
			player.setPosition(newHitbox.getBL());
		}
		else { //collision
			Rectangle col = mbColliderRect.get(); //ok get
			Gem mbGem = findGemWithRect( col );
			
			if (shipOnField != null && shipOnField.getHbox().equals(col)) {
				
				player.setShip(getShipOnField());
				shipOnField=null;
				
				//player collects ship
				
				
				
			}
			else if (mbGem != null) { //player collects gem
				player.addGemToBag(mbGem);
				gemsOnField = Arrays.stream(gemsOnField)
	                    .filter(g -> !g.equals(mbGem)) 
	                    .toArray(Gem[]::new);
				player.updateBag();
				
				//todo. Player.updateBag useful

			}
			else { //bouncing off a wall/block
				
				for (var b : blocks) {
					
					
					if (b.isFinish() && b.getHitbox().equals(col)&& gemsOnField.length==0) { 
						this.victory = true;
						break;
					}
				}
				
				Vector newSpeed = Rectangle.speedFromCollision(player.getHitbox(), player.getSpeed(), col);
				player.setSpeed(newSpeed);
				Rectangle newHitbox2 = player.getHitbox().plus(player.getSpeed());
				if (Rectangle.selectCollider(newHitbox2,rectangles()).isEmpty()) { //free to go to newHitbox2
					player.setPosition(newHitbox2.getBL());
				}
			}
			
		}
	}
	
	
	/**
	 * LEGIT
	 * 
	 * @pre | dir == -1 || dir == 0 || dir == 1
	 */
	public void movePlayerHorz(int dir) {
		
		player.updateDashingStatus();
		
		int x = player.getHspeed() * dir * (player.isDashing() ? 2 : 1);
		int y = player.getSpeed().y();
		player.setSpeed(new Vector(x,y));
	}

	/**
	 * Changes the player vertical speed using its jump speed (see Player.getVspeed)
	 * if the player is slightly above some surface (e.g. bottom wall), or
	 * below some surface in case gravity is switched
	 */
	public void jumpPlayer() {
				
		int x = player.getSpeed().x();
		int y = (gravitySwitched ? 1 : -1) * player.getVspeed();
		
		
		boolean doubleJumpOk =!playerNearSurface()  && player.updateAndGiveJumpTime()<=250 && player.getShip()!=null && player.getShip().getUpgrades().contains(Upgrade.DOUBLEJUMP);
; 
		//todo: double jump feature. Can double jump max 250ms after last jump.
		
		if (playerNearSurface() || doubleJumpOk) {
			player.setSpeed(new Vector(x,y));
		}
		
		if (playerNearSurface()) { player.resetJumpTime(); }
		
	}
	
	/**
	 * @pre | u != null
	 */
	public void tryUpgradePlayerShip(Upgrade u) {
		player.tryUpgradeShip(u);
		

	}
	
	public void trySwitchGravity() {
		gravitySwitched = player.getShip()!=null && player.getShip().getUpgrades().contains(Upgrade.GRAVSWITCH);
	}
	
	/**
	 * has an effect if the dashing upgrade is present
	 */
	public void makePlayerDash() {
		if (player.getShip()!=null && player.getShip().getUpgrades().contains(Upgrade.HORZDASH))
			player.setDashing();
		

	}
	
	
	/**
	 * LEGIT
	 * 
	 * if gravity is switched, detects if player is below some surface instead
	 */
	private boolean playerNearSurface() {
		Rectangle pulledHitbox = player.getHitbox().plus(
				new Vector(0, (gravitySwitched ? -1 : 1) * player.getHitbox().getHeight() / 2));
		return Rectangle.selectCollider(pulledHitbox, rectangles()).isPresent();
	}

	/**
	 * LEGIT
	 */
	private Rectangle botWall() {
		Point tl = field.getBL();
		return new Rectangle(tl,width,height/2).tripleHorizontally();
	}
	
	/**
	 * LEGIT
	 */
	private Rectangle leftWall() {
		Point tl = new Point(-width/2, 0);
		return new Rectangle(tl,width/2,height).tripleVertically();
	}
	
	/**
	 * LEGIT
	 */
	private Rectangle topWall() {
		Point tl = new Point(0, -height/2);
		return new Rectangle(tl, width, height/2).tripleHorizontally();
	}
	
	/**
	 * LEGIT
	 */
	private Rectangle rightWall() {
		Point tl = field.getTR();
		return new Rectangle(tl, width/2 , height).tripleVertically();
	}
	
	/**
	 * LEGIT
	 * 
	 * walls, blocks, gems on field, ship on field if present
	 * @post | result.size() <= 4 + blocks.length + gemsOnField.length + 1
	 */
	private ArrayList<Rectangle> rectangles() {
		
		var res = new ArrayList<Rectangle>();
		
		res.add(botWall()); res.add(leftWall()); res.add(topWall()); res.add(rightWall());
		for (var b : blocks) { res.add(b.getHitbox()); }
		for (var g : gemsOnField) { res.add(g.getHbox()); }
		if (shipOnField != null) { res.add(shipOnField.getHbox()); } 
		
		return res;
		
	}
	
	/**
	 * LEGIT
	 * 
	 * like rectangles but not external walls
	 * @post | result.size() <= blocks.length + gemsOnField.length + 1
	 */
	private ArrayList<Rectangle> rectanglesNoWalls() {
		
		var res = new ArrayList<Rectangle>();
		
		//res.add(botWall()); res.add(leftWall()); res.add(topWall()); res.add(rightWall());
		for (var b : blocks) { res.add(b.getHitbox()); }
		for (var g : gemsOnField) { res.add(g.getHbox()); }
		if (shipOnField != null) { res.add(shipOnField.getHbox()); } 
		
		return res;
		
	}
	
	/**
	 * LEGIT
	 * 
	 * Returns all rectangles in the world (player, gems, blocks and ship) but not external walls
	 * @post | result.size() <= getBlocks().length + getGemsOnField().length + 1
	 */
	public ArrayList<Rectangle> rectanglesNoWallsPub() {
		return rectanglesNoWalls();		
	}
	
	/**
	 * null if not found
	 */
	private Gem findGemWithRect(Rectangle r) {
		for (Gem g:getGemsOnField()) {
			if (g.getHbox().equals(r))
					return g;
		}
			
		return null;
	}
	 
	
	
	
	
}


